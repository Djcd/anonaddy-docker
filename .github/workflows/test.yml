name: test

on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'

env:
  BUILD_TAG: anonaddy:test
  CONTAINER_NAME: anonaddy

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build
        uses: docker/bake-action@v2
        with:
          targets: image-local
        env:
          DEFAULT_TAG: ${{ env.BUILD_TAG }}
      -
        name: Create network
        run: |
          docker network create -d bridge ${{ env.CONTAINER_NAME }}
      -
        name: Start MariaDB container
        run: |
          docker run -d --name mariadb --hostname mariadb \
            --network ${{ env.CONTAINER_NAME }} \
            -e "MYSQL_ALLOW_EMPTY_PASSWORD=yes" \
            -e "MYSQL_DATABASE=anonaddy" \
            -e "MYSQL_USER=anonaddy" \
            -e "MYSQL_PASSWORD=anonaddy" \
            mariadb:10.5
      -
        name: Generate DKIM private key
        run: |
          docker run --rm -t --entrypoint "" \
            -e "ANONADDY_DOMAIN=example.com" \
            -v "/tmp/data:/data" \
            ${{ env.BUILD_TAG }} gen-dkim
      -
        name: Start container
        run: |
          docker run -d --name ${{ env.CONTAINER_NAME }} \
            --link mariadb \
            --network ${{ env.CONTAINER_NAME }} \
            -e "DB_HOST=mariadb" \
            -e "DB_DATABASE=anonaddy" \
            -e "DB_USERNAME=anonaddy" \
            -e "DB_PASSWORD=anonaddy" \
            -e "APP_KEY=base64:Gh8/RWtNfXTmB09pj6iEflt/L6oqDf9ZxXIh4I9MS7A=" \
            -e "ANONADDY_DOMAIN=example.com" \
            -e "ANONADDY_SECRET=0123456789abcdefghijklmnopqrstuvwxyz" \
            -e "RSPAMD_ENABLE=true" \
            -v "/tmp/data:/data" \
            ${{ env.BUILD_TAG }}
      -
        name: Check container logs
        uses: crazy-max/.github/.github/actions/container-logs-check@main
        with:
          container_name: ${{ env.CONTAINER_NAME }}
          log_check: "ready to handle connections"
          timeout: 120
      -
        name: Container logs
        if: always()
        run: |
          docker logs ${{ env.CONTAINER_NAME }}
          docker rm -f ${{ env.CONTAINER_NAME }} > /dev/null 2>&1 || true
